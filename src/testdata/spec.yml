openapi: 3.0.3
info:
  title: Fake OpenAPI Spec
  description: This is the spec for internal REST API
  version: "1.0.0"
  contact:
    email: federico@fiuto.io
  license:
    name: MIT
    url: "https://www.fiuto.io/"

tags:
  - name: Authentication
    description: Operations related to access platform
  - name: Information
    description: Endpoints that provide user or system-related information

servers:
  - url: http://127.0.0.1:8000
    description: Local host test

paths:
  /api/v1/login:
    post:
      tags:
        - Authentication
      operationId: "login"
      summary: User login
      description: Allows users to login and receive a token and refresh token.
      requestBody:
        required: true
        description: "payload for login"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request, invalid input
        "401":
          description: Unauthorized, invalid credentials
      security:
        - bearerAuth: []

  /api/v1/me:
    get:
      tags:
        - Information
      operationId: "getMe"
      summary: Get user details
      description: Returns the current user's details based on the provided JWT token in the Authorization header.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response with user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeResponse"
        "401":
          description: Unauthorized, invalid or missing token

  /api/v1/org/info:
    get:
      tags:
        - Information
      operationId: getOrgInfo
      summary: Get Organization Information
      description: Returns general information about the organization, including HQ location details.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response containing organization information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgInfoResponse"
        "404":
          description: Organization not found

components:
  schemas:
    LoginRequest:
      type: object
      description: "payload for login request"
      properties:
        email:
          type: string
          format: email
          description: The user's email address.
          example: "federico@ditta.io"
        org:
          type: string
          description: The user's organization.
          example: "ditta"
        password:
          type: string
          format: password
          description: The user's password.
          example: "CiaoCiao94!%"
      required:
        - email
        - org
        - password
      example:
        email: "federico@ditta.io"
        org: "ditta"
        password: "CiaoCiao1234$#"

    LoginResponse:
      type: object
      description: "data returned if login successful"
      properties:
        token:
          type: string
          description: JWT token for authentication.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o"
        refresh_token:
          type: string
          description: Token used to refresh authentication.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o"
      required:
        - token
        - refresh_token
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o"
        refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o"

    MeResponse:
      type: object
      description: "User data returned for the /me endpoint"
      properties:
        email:
          type: string
          description: The user's email address.
          example: "federico@ditta.io"
      required:
        - email
      example:
        email: "federico@ditta.io"

    OrgInfoResponse:
      type: object
      properties:
        hq:
          $ref: "#/components/schemas/HQ"

    HQ:
      type: object
      properties:
        address:
          type: string
          example: "123 Main St"
        postal_code:
          type: string
          example: "12345"
        city:
          type: string
          example: "New York"
        state_region:
          type: string
          example: "NY"
        country:
          type: string
          example: "USA"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
